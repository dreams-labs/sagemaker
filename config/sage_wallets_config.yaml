#SageMaker Config

training_data: #SageMaker
    local_s3_root: ../  # where s3_uploads and s3_downloads exist
    training_data_directory: dda_897_td_column_ordering_v1  # where to load local csvs from
    local_directory: dda_920_eval_models_nginv_040  # where to store local artifacts
    upload_directory: dda-920-nginv-040  # new S3 folder name in bucket training_data_processed
    dataset: dev  # Set to prod or dev; determines whether to query core or dev dataset tables

    train_offsets: [
        # '230908',
        # '231008',
        # '231107',
        # '231207',
        # '240106',
        # '240205',
        # '240306',
        # '240405',
        # '240505',
        # '240604',
        # '240704',
        # '240803',
        # '240902',
        # '241002',
        '241101',
        '241231',
    ]
    eval_offsets: [
        '241201',
        '250130',

    ]
    val_offsets: [
        '250301',
    ]

preprocessing: #SageMaker
    fill_na:
        coin_trends: -1
        mktcap: -1
        performance: 0
        scenario|ideal: max
        scenario|worst: min
        scenario|net_perf: mean
        transfers: -1
        transfers: 1

workflow:
    override_existing_models: True  # whether to train models for a date_suffix if one already exists

aws: #SageMaker
    training_bucket: wallet-training-data
    script_model_bucket: wallet-script-models
    preprocessed_directory: training-data-preprocessed
    temporal_cv_directory: training-data-temporal-cvs
    modeler_arn: arn:aws:iam::891377123484:role/sagemaker_runner

script_mode: #SageMaker
    enabled: True
    # entry_point: single_model_entry.py
    entry_point: temporal_cv_model_entry.py
    source_dir: ../src/script_modeling

n_threads: #SageMaker
    upload_all_training_data: 4 # how many uploads to perform concurrently
    train_all_models: 4 # how many models to train concurrently
    predict_datasets: 4 # whether to score 'test' and 'val' sets concurrently
    predict_all_models: 4 # how many test/val pairs to score concurrently
    evaluate_all_models: 4 # how many test/val pairs to score concurrently